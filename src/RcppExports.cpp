// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ipcwcpp
List ipcwcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string tstart, const std::string tstop, const std::string event, const std::string treat, const std::string swtrt, const std::string swtrt_time, const StringVector& base_cov, const StringVector& numerator, const StringVector& denominator, const bool logistic_switching_model, const bool strata_main_effect_only, const bool firth, const bool flic, const int ns_df, const bool stabilized_weights, const double trunc, const bool trunc_upper_only, const bool swtrt_control_only, const double alpha, const std::string ties, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_ipcwcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP base_covSEXP, SEXP numeratorSEXP, SEXP denominatorSEXP, SEXP logistic_switching_modelSEXP, SEXP strata_main_effect_onlySEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP ns_dfSEXP, SEXP stabilized_weightsSEXP, SEXP truncSEXP, SEXP trunc_upper_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type numerator(numeratorSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const bool >::type logistic_switching_model(logistic_switching_modelSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const int >::type ns_df(ns_dfSEXP);
    Rcpp::traits::input_parameter< const bool >::type stabilized_weights(stabilized_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< const bool >::type trunc_upper_only(trunc_upper_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ipcwcpp(data, id, stratum, tstart, tstop, event, treat, swtrt, swtrt_time, base_cov, numerator, denominator, logistic_switching_model, strata_main_effect_only, firth, flic, ns_df, stabilized_weights, trunc, trunc_upper_only, swtrt_control_only, alpha, ties, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// ipecpp
List ipecpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string rx, const std::string censor_time, const StringVector& base_cov, const std::string aft_dist, const bool strata_main_effect_only, const double low_psi, const double hi_psi, const double treat_modifier, const bool recensor, const bool admin_recensor_only, const bool autoswitch, const std::string root_finding, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_ipecpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP rxSEXP, SEXP censor_timeSEXP, SEXP base_covSEXP, SEXP aft_distSEXP, SEXP strata_main_effect_onlySEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP treat_modifierSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP autoswitchSEXP, SEXP root_findingSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rx(rxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const std::string >::type aft_dist(aft_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const std::string >::type root_finding(root_findingSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ipecpp(data, id, stratum, time, event, treat, rx, censor_time, base_cov, aft_dist, strata_main_effect_only, low_psi, hi_psi, treat_modifier, recensor, admin_recensor_only, autoswitch, root_finding, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// logisregcpp
List logisregcpp(const DataFrame data, const StringVector& rep, const std::string event, const StringVector& covariates, const std::string freq, const std::string weight, const std::string offset, const std::string id, const std::string link, const NumericVector& init, const bool robust, const bool firth, const bool flic, const bool plci, const double alpha, const int maxiter, const double eps);
RcppExport SEXP _trtswitch_logisregcpp(SEXP dataSEXP, SEXP repSEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP freqSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP linkSEXP, SEXP initSEXP, SEXP robustSEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP plciSEXP, SEXP alphaSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(logisregcpp(data, rep, event, covariates, freq, weight, offset, id, link, init, robust, firth, flic, plci, alpha, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// msmcpp
List msmcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string tstart, const std::string tstop, const std::string event, const std::string treat, const std::string swtrt, const std::string swtrt_time, const StringVector& base_cov, const StringVector& numerator, const StringVector& denominator, const bool strata_main_effect_only, const bool firth, const bool flic, const int ns_df, const bool stabilized_weights, const double trunc, const bool trunc_upper_only, const bool swtrt_control_only, const bool treat_alt_interaction, const double alpha, const std::string ties, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_msmcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP base_covSEXP, SEXP numeratorSEXP, SEXP denominatorSEXP, SEXP strata_main_effect_onlySEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP ns_dfSEXP, SEXP stabilized_weightsSEXP, SEXP truncSEXP, SEXP trunc_upper_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP treat_alt_interactionSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type numerator(numeratorSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const int >::type ns_df(ns_dfSEXP);
    Rcpp::traits::input_parameter< const bool >::type stabilized_weights(stabilized_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< const bool >::type trunc_upper_only(trunc_upper_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type treat_alt_interaction(treat_alt_interactionSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(msmcpp(data, id, stratum, tstart, tstop, event, treat, swtrt, swtrt_time, base_cov, numerator, denominator, strata_main_effect_only, firth, flic, ns_df, stabilized_weights, trunc, trunc_upper_only, swtrt_control_only, treat_alt_interaction, alpha, ties, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// recensor_sim_rpsftm
DataFrame recensor_sim_rpsftm(const int nsim, const int n, const double shape, const double scale, const double gamma, const double tfmin, const double tfmax, const double psi, const double omega, const double pswitch, const double a, const double b, const double low_psi, const double hi_psi, const double treat_modifier, const int recensor_type, const bool admin_recensor_only, const bool autoswitch, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_recensor_sim_rpsftm(SEXP nsimSEXP, SEXP nSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP gammaSEXP, SEXP tfminSEXP, SEXP tfmaxSEXP, SEXP psiSEXP, SEXP omegaSEXP, SEXP pswitchSEXP, SEXP aSEXP, SEXP bSEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP treat_modifierSEXP, SEXP recensor_typeSEXP, SEXP admin_recensor_onlySEXP, SEXP autoswitchSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type tfmin(tfminSEXP);
    Rcpp::traits::input_parameter< const double >::type tfmax(tfmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const double >::type pswitch(pswitchSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const int >::type recensor_type(recensor_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(recensor_sim_rpsftm(nsim, n, shape, scale, gamma, tfmin, tfmax, psi, omega, pswitch, a, b, low_psi, hi_psi, treat_modifier, recensor_type, admin_recensor_only, autoswitch, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// rpsftmcpp
List rpsftmcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string rx, const std::string censor_time, const StringVector& base_cov, const std::string psi_test, const std::string aft_dist, const bool strata_main_effect_only, const double low_psi, const double hi_psi, const int n_eval_z, const double treat_modifier, const bool recensor, const bool admin_recensor_only, const bool autoswitch, const bool gridsearch, const std::string root_finding, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_rpsftmcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP rxSEXP, SEXP censor_timeSEXP, SEXP base_covSEXP, SEXP psi_testSEXP, SEXP aft_distSEXP, SEXP strata_main_effect_onlySEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP n_eval_zSEXP, SEXP treat_modifierSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP autoswitchSEXP, SEXP gridsearchSEXP, SEXP root_findingSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rx(rxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const std::string >::type psi_test(psi_testSEXP);
    Rcpp::traits::input_parameter< const std::string >::type aft_dist(aft_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eval_z(n_eval_zSEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const bool >::type gridsearch(gridsearchSEXP);
    Rcpp::traits::input_parameter< const std::string >::type root_finding(root_findingSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rpsftmcpp(data, id, stratum, time, event, treat, rx, censor_time, base_cov, psi_test, aft_dist, strata_main_effect_only, low_psi, hi_psi, n_eval_z, treat_modifier, recensor, admin_recensor_only, autoswitch, gridsearch, root_finding, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// splineDesigncpp
NumericMatrix splineDesigncpp(NumericVector knots, NumericVector x, int ord, IntegerVector derivs);
RcppExport SEXP _trtswitch_splineDesigncpp(SEXP knotsSEXP, SEXP xSEXP, SEXP ordSEXP, SEXP derivsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type derivs(derivsSEXP);
    rcpp_result_gen = Rcpp::wrap(splineDesigncpp(knots, x, ord, derivs));
    return rcpp_result_gen;
END_RCPP
}
// bscpp
NumericMatrix bscpp(NumericVector x, int df, NumericVector knots, int degree, bool intercept, NumericVector boundary_knots, bool warn_outside);
RcppExport SEXP _trtswitch_bscpp(SEXP xSEXP, SEXP dfSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP interceptSEXP, SEXP boundary_knotsSEXP, SEXP warn_outsideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type warn_outside(warn_outsideSEXP);
    rcpp_result_gen = Rcpp::wrap(bscpp(x, df, knots, degree, intercept, boundary_knots, warn_outside));
    return rcpp_result_gen;
END_RCPP
}
// nscpp
NumericMatrix nscpp(NumericVector x, int df, NumericVector knots, bool intercept, NumericVector boundary_knots);
RcppExport SEXP _trtswitch_nscpp(SEXP xSEXP, SEXP dfSEXP, SEXP knotsSEXP, SEXP interceptSEXP, SEXP boundary_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type boundary_knots(boundary_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(nscpp(x, df, knots, intercept, boundary_knots));
    return rcpp_result_gen;
END_RCPP
}
// survQuantile
DataFrame survQuantile(const NumericVector& time, const IntegerVector& event, const double cilevel, const std::string transform, const NumericVector& probs);
RcppExport SEXP _trtswitch_survQuantile(SEXP timeSEXP, SEXP eventSEXP, SEXP cilevelSEXP, SEXP transformSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    Rcpp::traits::input_parameter< const std::string >::type transform(transformSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(survQuantile(time, event, cilevel, transform, probs));
    return rcpp_result_gen;
END_RCPP
}
// kmest
DataFrame kmest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string event, const std::string conftype, const double conflev, const bool keep_censor);
RcppExport SEXP _trtswitch_kmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP conftypeSEXP, SEXP conflevSEXP, SEXP keep_censorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type conftype(conftypeSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    Rcpp::traits::input_parameter< const bool >::type keep_censor(keep_censorSEXP);
    rcpp_result_gen = Rcpp::wrap(kmest(data, rep, stratum, time, event, conftype, conflev, keep_censor));
    return rcpp_result_gen;
END_RCPP
}
// kmdiff
DataFrame kmdiff(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string treat, const std::string time, const std::string event, const double milestone, const double survDiffH0, const double conflev);
RcppExport SEXP _trtswitch_kmdiff(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP survDiffH0SEXP, SEXP conflevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffH0(survDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    rcpp_result_gen = Rcpp::wrap(kmdiff(data, rep, stratum, treat, time, event, milestone, survDiffH0, conflev));
    return rcpp_result_gen;
END_RCPP
}
// lrtest
DataFrame lrtest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string treat, const std::string time, const std::string event, const double rho1, const double rho2);
RcppExport SEXP _trtswitch_lrtest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP rho1SEXP, SEXP rho2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    rcpp_result_gen = Rcpp::wrap(lrtest(data, rep, stratum, treat, time, event, rho1, rho2));
    return rcpp_result_gen;
END_RCPP
}
// rmest
DataFrame rmest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string event, const double milestone, const double conflev, const bool biascorrection);
RcppExport SEXP _trtswitch_rmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP conflevSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmest(data, rep, stratum, time, event, milestone, conflev, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// rmdiff
DataFrame rmdiff(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string treat, const std::string time, const std::string event, const double milestone, const double rmstDiffH0, const double conflev, const bool biascorrection);
RcppExport SEXP _trtswitch_rmdiff(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP rmstDiffH0SEXP, SEXP conflevSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffH0(rmstDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmdiff(data, rep, stratum, treat, time, event, milestone, rmstDiffH0, conflev, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// liferegcpp
List liferegcpp(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string dist, const NumericVector& init, const bool robust, const bool plci, const double alpha, const int maxiter, const double eps);
RcppExport SEXP _trtswitch_liferegcpp(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP distSEXP, SEXP initSEXP, SEXP robustSEXP, SEXP plciSEXP, SEXP alphaSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(liferegcpp(data, rep, stratum, time, time2, event, covariates, weight, offset, id, dist, init, robust, plci, alpha, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// residuals_liferegcpp
NumericMatrix residuals_liferegcpp(const NumericVector& beta, const NumericMatrix& vbeta, DataFrame data, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string dist, const std::string type, const bool collapse, const bool weighted);
RcppExport SEXP _trtswitch_residuals_liferegcpp(SEXP betaSEXP, SEXP vbetaSEXP, SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP distSEXP, SEXP typeSEXP, SEXP collapseSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vbeta(vbetaSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type collapse(collapseSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(residuals_liferegcpp(beta, vbeta, data, stratum, time, time2, event, covariates, weight, offset, id, dist, type, collapse, weighted));
    return rcpp_result_gen;
END_RCPP
}
// phregcpp
List phregcpp(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string ties, const NumericVector& init, const bool robust, const bool est_basehaz, const bool est_resid, const bool firth, const bool plci, const double alpha, const int maxiter, const double eps);
RcppExport SEXP _trtswitch_phregcpp(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tiesSEXP, SEXP initSEXP, SEXP robustSEXP, SEXP est_basehazSEXP, SEXP est_residSEXP, SEXP firthSEXP, SEXP plciSEXP, SEXP alphaSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type est_basehaz(est_basehazSEXP);
    Rcpp::traits::input_parameter< const bool >::type est_resid(est_residSEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(phregcpp(data, rep, stratum, time, time2, event, covariates, weight, offset, id, ties, init, robust, est_basehaz, est_resid, firth, plci, alpha, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// survfit_phregcpp
DataFrame survfit_phregcpp(const int p, const NumericVector& beta, const NumericMatrix& vbeta, DataFrame basehaz, DataFrame newdata, const StringVector& covariates, const StringVector& stratum, const std::string offset, const std::string id, const std::string tstart, const std::string tstop, const bool sefit, const String conftype, const double conflev);
RcppExport SEXP _trtswitch_survfit_phregcpp(SEXP pSEXP, SEXP betaSEXP, SEXP vbetaSEXP, SEXP basehazSEXP, SEXP newdataSEXP, SEXP covariatesSEXP, SEXP stratumSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sefitSEXP, SEXP conftypeSEXP, SEXP conflevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vbeta(vbetaSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type basehaz(basehazSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const bool >::type sefit(sefitSEXP);
    Rcpp::traits::input_parameter< const String >::type conftype(conftypeSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    rcpp_result_gen = Rcpp::wrap(survfit_phregcpp(p, beta, vbeta, basehaz, newdata, covariates, stratum, offset, id, tstart, tstop, sefit, conftype, conflev));
    return rcpp_result_gen;
END_RCPP
}
// residuals_phregcpp
List residuals_phregcpp(const int p, const NumericVector& beta, const NumericMatrix& vbeta, const NumericVector& resmart, DataFrame data, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string ties, const std::string type, const bool collapse, const bool weighted);
RcppExport SEXP _trtswitch_residuals_phregcpp(SEXP pSEXP, SEXP betaSEXP, SEXP vbetaSEXP, SEXP resmartSEXP, SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tiesSEXP, SEXP typeSEXP, SEXP collapseSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vbeta(vbetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type resmart(resmartSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type collapse(collapseSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(residuals_phregcpp(p, beta, vbeta, resmart, data, stratum, time, time2, event, covariates, weight, offset, id, ties, type, collapse, weighted));
    return rcpp_result_gen;
END_RCPP
}
// tsegestcpp
List tsegestcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string tstart, const std::string tstop, const std::string event, const std::string treat, const std::string censor_time, const std::string pd, const std::string pd_time, const std::string swtrt, const std::string swtrt_time, const StringVector& base_cov, const StringVector& conf_cov, const double low_psi, const double hi_psi, const int n_eval_z, const bool strata_main_effect_only, const bool firth, const bool flic, const int ns_df, const bool recensor, const bool admin_recensor_only, const bool swtrt_control_only, const bool gridsearch, const std::string root_finding, const double alpha, const std::string ties, const double tol, const double offset, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_tsegestcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP censor_timeSEXP, SEXP pdSEXP, SEXP pd_timeSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP base_covSEXP, SEXP conf_covSEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP n_eval_zSEXP, SEXP strata_main_effect_onlySEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP ns_dfSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP gridsearchSEXP, SEXP root_findingSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP offsetSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd(pdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd_time(pd_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type conf_cov(conf_covSEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eval_z(n_eval_zSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const int >::type ns_df(ns_dfSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type gridsearch(gridsearchSEXP);
    Rcpp::traits::input_parameter< const std::string >::type root_finding(root_findingSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsegestcpp(data, id, stratum, tstart, tstop, event, treat, censor_time, pd, pd_time, swtrt, swtrt_time, base_cov, conf_cov, low_psi, hi_psi, n_eval_z, strata_main_effect_only, firth, flic, ns_df, recensor, admin_recensor_only, swtrt_control_only, gridsearch, root_finding, alpha, ties, tol, offset, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// tsegestsim
List tsegestsim(const int n, const int allocation1, const int allocation2, const double pbprog, const double trtlghr, const double bprogsl, const double shape1, const double scale1, const double shape2, const double scale2, const double pmix, const double admin, const double pcatnotrtbprog, const double pcattrtbprog, const double pcatnotrt, const double pcattrt, const double catmult, const double tdxo, const double ppoor, const double pgood, const double ppoormet, const double pgoodmet, const double xomult, const double milestone, const bool outputRawDataset, const int seed);
RcppExport SEXP _trtswitch_tsegestsim(SEXP nSEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP pbprogSEXP, SEXP trtlghrSEXP, SEXP bprogslSEXP, SEXP shape1SEXP, SEXP scale1SEXP, SEXP shape2SEXP, SEXP scale2SEXP, SEXP pmixSEXP, SEXP adminSEXP, SEXP pcatnotrtbprogSEXP, SEXP pcattrtbprogSEXP, SEXP pcatnotrtSEXP, SEXP pcattrtSEXP, SEXP catmultSEXP, SEXP tdxoSEXP, SEXP ppoorSEXP, SEXP pgoodSEXP, SEXP ppoormetSEXP, SEXP pgoodmetSEXP, SEXP xomultSEXP, SEXP milestoneSEXP, SEXP outputRawDatasetSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const double >::type pbprog(pbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type trtlghr(trtlghrSEXP);
    Rcpp::traits::input_parameter< const double >::type bprogsl(bprogslSEXP);
    Rcpp::traits::input_parameter< const double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< const double >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< const double >::type scale2(scale2SEXP);
    Rcpp::traits::input_parameter< const double >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const double >::type admin(adminSEXP);
    Rcpp::traits::input_parameter< const double >::type pcatnotrtbprog(pcatnotrtbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type pcattrtbprog(pcattrtbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type pcatnotrt(pcatnotrtSEXP);
    Rcpp::traits::input_parameter< const double >::type pcattrt(pcattrtSEXP);
    Rcpp::traits::input_parameter< const double >::type catmult(catmultSEXP);
    Rcpp::traits::input_parameter< const double >::type tdxo(tdxoSEXP);
    Rcpp::traits::input_parameter< const double >::type ppoor(ppoorSEXP);
    Rcpp::traits::input_parameter< const double >::type pgood(pgoodSEXP);
    Rcpp::traits::input_parameter< const double >::type ppoormet(ppoormetSEXP);
    Rcpp::traits::input_parameter< const double >::type pgoodmet(pgoodmetSEXP);
    Rcpp::traits::input_parameter< const double >::type xomult(xomultSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const bool >::type outputRawDataset(outputRawDatasetSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsegestsim(n, allocation1, allocation2, pbprog, trtlghr, bprogsl, shape1, scale1, shape2, scale2, pmix, admin, pcatnotrtbprog, pcattrtbprog, pcatnotrt, pcattrt, catmult, tdxo, ppoor, pgood, ppoormet, pgoodmet, xomult, milestone, outputRawDataset, seed));
    return rcpp_result_gen;
END_RCPP
}
// tsesimpcpp
List tsesimpcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string censor_time, const std::string pd, const std::string pd_time, const std::string swtrt, const std::string swtrt_time, const StringVector& base_cov, const StringVector& base2_cov, const std::string aft_dist, const bool strata_main_effect_only, const bool recensor, const bool admin_recensor_only, const bool swtrt_control_only, const double alpha, const std::string ties, const double offset, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_tsesimpcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP censor_timeSEXP, SEXP pdSEXP, SEXP pd_timeSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP base_covSEXP, SEXP base2_covSEXP, SEXP aft_distSEXP, SEXP strata_main_effect_onlySEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP offsetSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd(pdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd_time(pd_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base2_cov(base2_covSEXP);
    Rcpp::traits::input_parameter< const std::string >::type aft_dist(aft_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsesimpcpp(data, id, stratum, time, event, treat, censor_time, pd, pd_time, swtrt, swtrt_time, base_cov, base2_cov, aft_dist, strata_main_effect_only, recensor, admin_recensor_only, swtrt_control_only, alpha, ties, offset, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// tssim
List tssim(const bool tdxo, const bool coxo, const int allocation1, const int allocation2, const double p_X_1, const double p_X_0, const double rate_T, const double beta1, const double beta2, const double gamma0, const double gamma1, const double gamma2, const double gamma3, const double gamma4, const double zeta0, const double zeta1, const double zeta2, const double zeta3, const double alpha0, const double alpha1, const double alpha2, const double theta1_1, const double theta1_0, const double theta2, const double rate_C, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const double followupTime, const bool fixedFollowup, const double plannedTime, const double days, const int n, const int NSim, const int seed);
RcppExport SEXP _trtswitch_tssim(SEXP tdxoSEXP, SEXP coxoSEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP p_X_1SEXP, SEXP p_X_0SEXP, SEXP rate_TSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP gamma0SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP gamma3SEXP, SEXP gamma4SEXP, SEXP zeta0SEXP, SEXP zeta1SEXP, SEXP zeta2SEXP, SEXP zeta3SEXP, SEXP alpha0SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP theta1_1SEXP, SEXP theta1_0SEXP, SEXP theta2SEXP, SEXP rate_CSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP plannedTimeSEXP, SEXP daysSEXP, SEXP nSEXP, SEXP NSimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type tdxo(tdxoSEXP);
    Rcpp::traits::input_parameter< const bool >::type coxo(coxoSEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const double >::type p_X_1(p_X_1SEXP);
    Rcpp::traits::input_parameter< const double >::type p_X_0(p_X_0SEXP);
    Rcpp::traits::input_parameter< const double >::type rate_T(rate_TSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma3(gamma3SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma4(gamma4SEXP);
    Rcpp::traits::input_parameter< const double >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double >::type zeta1(zeta1SEXP);
    Rcpp::traits::input_parameter< const double >::type zeta2(zeta2SEXP);
    Rcpp::traits::input_parameter< const double >::type zeta3(zeta3SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const double >::type theta1_1(theta1_1SEXP);
    Rcpp::traits::input_parameter< const double >::type theta1_0(theta1_0SEXP);
    Rcpp::traits::input_parameter< const double >::type theta2(theta2SEXP);
    Rcpp::traits::input_parameter< const double >::type rate_C(rate_CSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type days(daysSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type NSim(NSimSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tssim(tdxo, coxo, allocation1, allocation2, p_X_1, p_X_0, rate_T, beta1, beta2, gamma0, gamma1, gamma2, gamma3, gamma4, zeta0, zeta1, zeta2, zeta3, alpha0, alpha1, alpha2, theta1_1, theta1_0, theta2, rate_C, accrualTime, accrualIntensity, followupTime, fixedFollowup, plannedTime, days, n, NSim, seed));
    return rcpp_result_gen;
END_RCPP
}
// findInterval3
IntegerVector findInterval3(NumericVector x, NumericVector v, bool rightmost_closed, bool all_inside, bool left_open);
RcppExport SEXP _trtswitch_findInterval3(SEXP xSEXP, SEXP vSEXP, SEXP rightmost_closedSEXP, SEXP all_insideSEXP, SEXP left_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type rightmost_closed(rightmost_closedSEXP);
    Rcpp::traits::input_parameter< bool >::type all_inside(all_insideSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval3(x, v, rightmost_closed, all_inside, left_open));
    return rcpp_result_gen;
END_RCPP
}
// hasVariable
bool hasVariable(DataFrame df, std::string varName);
RcppExport SEXP _trtswitch_hasVariable(SEXP dfSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< std::string >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(hasVariable(df, varName));
    return rcpp_result_gen;
END_RCPP
}
// survsplit
DataFrame survsplit(NumericVector tstart, NumericVector tstop, NumericVector cut);
RcppExport SEXP _trtswitch_survsplit(SEXP tstartSEXP, SEXP tstopSEXP, SEXP cutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut(cutSEXP);
    rcpp_result_gen = Rcpp::wrap(survsplit(tstart, tstop, cut));
    return rcpp_result_gen;
END_RCPP
}
// qrcpp
List qrcpp(const NumericMatrix& X, double tol);
RcppExport SEXP _trtswitch_qrcpp(SEXP XSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(qrcpp(X, tol));
    return rcpp_result_gen;
END_RCPP
}
// match3
IntegerVector match3(const IntegerVector id1, const NumericVector v1, const IntegerVector id2, const NumericVector v2);
RcppExport SEXP _trtswitch_match3(SEXP id1SEXP, SEXP v1SEXP, SEXP id2SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type id1(id1SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type id2(id2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(match3(id1, v1, id2, v2));
    return rcpp_result_gen;
END_RCPP
}
// qtpwexpcpp1
double qtpwexpcpp1(const double p, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound, const bool lowertail, const bool logp);
RcppExport SEXP _trtswitch_qtpwexpcpp1(SEXP pSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP, SEXP lowertailSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(qtpwexpcpp1(p, piecewiseSurvivalTime, lambda, lowerBound, lowertail, logp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_trtswitch_ipcwcpp", (DL_FUNC) &_trtswitch_ipcwcpp, 26},
    {"_trtswitch_ipecpp", (DL_FUNC) &_trtswitch_ipecpp, 24},
    {"_trtswitch_logisregcpp", (DL_FUNC) &_trtswitch_logisregcpp, 17},
    {"_trtswitch_msmcpp", (DL_FUNC) &_trtswitch_msmcpp, 26},
    {"_trtswitch_recensor_sim_rpsftm", (DL_FUNC) &_trtswitch_recensor_sim_rpsftm, 24},
    {"_trtswitch_rpsftmcpp", (DL_FUNC) &_trtswitch_rpsftmcpp, 27},
    {"_trtswitch_splineDesigncpp", (DL_FUNC) &_trtswitch_splineDesigncpp, 4},
    {"_trtswitch_bscpp", (DL_FUNC) &_trtswitch_bscpp, 7},
    {"_trtswitch_nscpp", (DL_FUNC) &_trtswitch_nscpp, 5},
    {"_trtswitch_survQuantile", (DL_FUNC) &_trtswitch_survQuantile, 5},
    {"_trtswitch_kmest", (DL_FUNC) &_trtswitch_kmest, 8},
    {"_trtswitch_kmdiff", (DL_FUNC) &_trtswitch_kmdiff, 9},
    {"_trtswitch_lrtest", (DL_FUNC) &_trtswitch_lrtest, 8},
    {"_trtswitch_rmest", (DL_FUNC) &_trtswitch_rmest, 8},
    {"_trtswitch_rmdiff", (DL_FUNC) &_trtswitch_rmdiff, 10},
    {"_trtswitch_liferegcpp", (DL_FUNC) &_trtswitch_liferegcpp, 17},
    {"_trtswitch_residuals_liferegcpp", (DL_FUNC) &_trtswitch_residuals_liferegcpp, 15},
    {"_trtswitch_phregcpp", (DL_FUNC) &_trtswitch_phregcpp, 20},
    {"_trtswitch_survfit_phregcpp", (DL_FUNC) &_trtswitch_survfit_phregcpp, 14},
    {"_trtswitch_residuals_phregcpp", (DL_FUNC) &_trtswitch_residuals_phregcpp, 17},
    {"_trtswitch_tsegestcpp", (DL_FUNC) &_trtswitch_tsegestcpp, 33},
    {"_trtswitch_tsegestsim", (DL_FUNC) &_trtswitch_tsegestsim, 26},
    {"_trtswitch_tsesimpcpp", (DL_FUNC) &_trtswitch_tsesimpcpp, 24},
    {"_trtswitch_tssim", (DL_FUNC) &_trtswitch_tssim, 34},
    {"_trtswitch_findInterval3", (DL_FUNC) &_trtswitch_findInterval3, 5},
    {"_trtswitch_hasVariable", (DL_FUNC) &_trtswitch_hasVariable, 2},
    {"_trtswitch_survsplit", (DL_FUNC) &_trtswitch_survsplit, 3},
    {"_trtswitch_qrcpp", (DL_FUNC) &_trtswitch_qrcpp, 2},
    {"_trtswitch_match3", (DL_FUNC) &_trtswitch_match3, 4},
    {"_trtswitch_qtpwexpcpp1", (DL_FUNC) &_trtswitch_qtpwexpcpp1, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_trtswitch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
