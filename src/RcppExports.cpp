// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ipcwcpp
List ipcwcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string tstart, const std::string tstop, const std::string event, const std::string treat, const std::string swtrt, const std::string swtrt_time, const std::string swtrt_time_lower, const std::string swtrt_time_upper, const StringVector& base_cov, const StringVector& numerator, const StringVector& denominator, const bool logistic_switching_model, const bool strata_main_effect_only, const bool firth, const bool flic, const int ns_df, const bool stabilized_weights, const double trunc, const bool trunc_upper_only, const bool swtrt_control_only, const double alpha, const std::string ties, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_ipcwcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP swtrt_time_lowerSEXP, SEXP swtrt_time_upperSEXP, SEXP base_covSEXP, SEXP numeratorSEXP, SEXP denominatorSEXP, SEXP logistic_switching_modelSEXP, SEXP strata_main_effect_onlySEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP ns_dfSEXP, SEXP stabilized_weightsSEXP, SEXP truncSEXP, SEXP trunc_upper_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time_lower(swtrt_time_lowerSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time_upper(swtrt_time_upperSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type numerator(numeratorSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const bool >::type logistic_switching_model(logistic_switching_modelSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const int >::type ns_df(ns_dfSEXP);
    Rcpp::traits::input_parameter< const bool >::type stabilized_weights(stabilized_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< const bool >::type trunc_upper_only(trunc_upper_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ipcwcpp(data, id, stratum, tstart, tstop, event, treat, swtrt, swtrt_time, swtrt_time_lower, swtrt_time_upper, base_cov, numerator, denominator, logistic_switching_model, strata_main_effect_only, firth, flic, ns_df, stabilized_weights, trunc, trunc_upper_only, swtrt_control_only, alpha, ties, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// ipecpp
List ipecpp(const DataFrame data, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string rx, const std::string censor_time, const StringVector& base_cov, const std::string aft_dist, const bool strata_main_effect_only, const double treat_modifier, const bool recensor, const bool admin_recensor_only, const bool autoswitch, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_ipecpp(SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP rxSEXP, SEXP censor_timeSEXP, SEXP base_covSEXP, SEXP aft_distSEXP, SEXP strata_main_effect_onlySEXP, SEXP treat_modifierSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP autoswitchSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rx(rxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const std::string >::type aft_dist(aft_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ipecpp(data, stratum, time, event, treat, rx, censor_time, base_cov, aft_dist, strata_main_effect_only, treat_modifier, recensor, admin_recensor_only, autoswitch, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// logisregcpp
List logisregcpp(const DataFrame data, const StringVector& rep, const std::string event, const StringVector& covariates, const std::string freq, const std::string weight, const std::string offset, const std::string id, const bool robust, const bool firth, const bool flic, const bool plci, const double alpha);
RcppExport SEXP _trtswitch_logisregcpp(SEXP dataSEXP, SEXP repSEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP freqSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP robustSEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP plciSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(logisregcpp(data, rep, event, covariates, freq, weight, offset, id, robust, firth, flic, plci, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rpsftmcpp
List rpsftmcpp(const DataFrame data, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string rx, const std::string censor_time, const StringVector& base_cov, const double low_psi, const double hi_psi, const int n_eval_z, const double treat_modifier, const bool recensor, const bool admin_recensor_only, const bool autoswitch, const bool gridsearch, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_rpsftmcpp(SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP rxSEXP, SEXP censor_timeSEXP, SEXP base_covSEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP n_eval_zSEXP, SEXP treat_modifierSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP autoswitchSEXP, SEXP gridsearchSEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rx(rxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eval_z(n_eval_zSEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const bool >::type gridsearch(gridsearchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rpsftmcpp(data, stratum, time, event, treat, rx, censor_time, base_cov, low_psi, hi_psi, n_eval_z, treat_modifier, recensor, admin_recensor_only, autoswitch, gridsearch, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// splineDesigncpp
NumericMatrix splineDesigncpp(NumericVector knots, NumericVector x, int ord, IntegerVector derivs);
RcppExport SEXP _trtswitch_splineDesigncpp(SEXP knotsSEXP, SEXP xSEXP, SEXP ordSEXP, SEXP derivsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type derivs(derivsSEXP);
    rcpp_result_gen = Rcpp::wrap(splineDesigncpp(knots, x, ord, derivs));
    return rcpp_result_gen;
END_RCPP
}
// bscpp
NumericMatrix bscpp(NumericVector x, int df, NumericVector knots, int degree, bool intercept, NumericVector boundary_knots, bool warn_outside);
RcppExport SEXP _trtswitch_bscpp(SEXP xSEXP, SEXP dfSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP interceptSEXP, SEXP boundary_knotsSEXP, SEXP warn_outsideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type warn_outside(warn_outsideSEXP);
    rcpp_result_gen = Rcpp::wrap(bscpp(x, df, knots, degree, intercept, boundary_knots, warn_outside));
    return rcpp_result_gen;
END_RCPP
}
// nscpp
NumericMatrix nscpp(NumericVector x, int df, NumericVector knots, bool intercept, NumericVector boundary_knots);
RcppExport SEXP _trtswitch_nscpp(SEXP xSEXP, SEXP dfSEXP, SEXP knotsSEXP, SEXP interceptSEXP, SEXP boundary_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type boundary_knots(boundary_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(nscpp(x, df, knots, intercept, boundary_knots));
    return rcpp_result_gen;
END_RCPP
}
// fsurvci
NumericVector fsurvci(double surv, double sesurv, String ct, double z);
RcppExport SEXP _trtswitch_fsurvci(SEXP survSEXP, SEXP sesurvSEXP, SEXP ctSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type surv(survSEXP);
    Rcpp::traits::input_parameter< double >::type sesurv(sesurvSEXP);
    Rcpp::traits::input_parameter< String >::type ct(ctSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(fsurvci(surv, sesurv, ct, z));
    return rcpp_result_gen;
END_RCPP
}
// kmest
DataFrame kmest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string event, const std::string conftype, const double conflev);
RcppExport SEXP _trtswitch_kmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP conftypeSEXP, SEXP conflevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type conftype(conftypeSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    rcpp_result_gen = Rcpp::wrap(kmest(data, rep, stratum, time, event, conftype, conflev));
    return rcpp_result_gen;
END_RCPP
}
// lrtest
DataFrame lrtest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string treat, const std::string time, const std::string event, const double rho1, const double rho2);
RcppExport SEXP _trtswitch_lrtest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP rho1SEXP, SEXP rho2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    rcpp_result_gen = Rcpp::wrap(lrtest(data, rep, stratum, treat, time, event, rho1, rho2));
    return rcpp_result_gen;
END_RCPP
}
// rmest
DataFrame rmest(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string event, const double milestone, const double conflev, const bool biascorrection);
RcppExport SEXP _trtswitch_rmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP conflevSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmest(data, rep, stratum, time, event, milestone, conflev, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// rmdiff
DataFrame rmdiff(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string treat, const std::string time, const std::string event, const double milestone, const double rmstDiffH0, const double conflev, const bool biascorrection);
RcppExport SEXP _trtswitch_rmdiff(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP rmstDiffH0SEXP, SEXP conflevSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffH0(rmstDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmdiff(data, rep, stratum, treat, time, event, milestone, rmstDiffH0, conflev, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// liferegcpp
List liferegcpp(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string dist, const bool robust, const bool plci, const double alpha);
RcppExport SEXP _trtswitch_liferegcpp(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP distSEXP, SEXP robustSEXP, SEXP plciSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(liferegcpp(data, rep, stratum, time, time2, event, covariates, weight, offset, id, dist, robust, plci, alpha));
    return rcpp_result_gen;
END_RCPP
}
// phregcpp
List phregcpp(const DataFrame data, const StringVector& rep, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string ties, const bool robust, const bool est_basehaz, const bool est_resid, const bool firth, const bool plci, const double alpha);
RcppExport SEXP _trtswitch_phregcpp(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tiesSEXP, SEXP robustSEXP, SEXP est_basehazSEXP, SEXP est_residSEXP, SEXP firthSEXP, SEXP plciSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< const bool >::type est_basehaz(est_basehazSEXP);
    Rcpp::traits::input_parameter< const bool >::type est_resid(est_residSEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type plci(plciSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(phregcpp(data, rep, stratum, time, time2, event, covariates, weight, offset, id, ties, robust, est_basehaz, est_resid, firth, plci, alpha));
    return rcpp_result_gen;
END_RCPP
}
// survfit_phregcpp
DataFrame survfit_phregcpp(const int p, const NumericVector& beta, const NumericMatrix& vbeta, DataFrame basehaz, DataFrame newdata, const StringVector& covariates, const StringVector& stratum, const std::string offset, const std::string id, const std::string tstart, const std::string tstop, const bool sefit, const String conftype, const double conflev);
RcppExport SEXP _trtswitch_survfit_phregcpp(SEXP pSEXP, SEXP betaSEXP, SEXP vbetaSEXP, SEXP basehazSEXP, SEXP newdataSEXP, SEXP covariatesSEXP, SEXP stratumSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sefitSEXP, SEXP conftypeSEXP, SEXP conflevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vbeta(vbetaSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type basehaz(basehazSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const bool >::type sefit(sefitSEXP);
    Rcpp::traits::input_parameter< const String >::type conftype(conftypeSEXP);
    Rcpp::traits::input_parameter< const double >::type conflev(conflevSEXP);
    rcpp_result_gen = Rcpp::wrap(survfit_phregcpp(p, beta, vbeta, basehaz, newdata, covariates, stratum, offset, id, tstart, tstop, sefit, conftype, conflev));
    return rcpp_result_gen;
END_RCPP
}
// residuals_phregcpp
List residuals_phregcpp(const int p, const NumericVector& beta, DataFrame data, const StringVector& stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string offset, const std::string id, const std::string ties, const std::string type);
RcppExport SEXP _trtswitch_residuals_phregcpp(SEXP pSEXP, SEXP betaSEXP, SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP idSEXP, SEXP tiesSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(residuals_phregcpp(p, beta, data, stratum, time, time2, event, covariates, weight, offset, id, ties, type));
    return rcpp_result_gen;
END_RCPP
}
// tsegestcpp
List tsegestcpp(const DataFrame data, const std::string id, const StringVector& stratum, const std::string tstart, const std::string tstop, const std::string event, const std::string treat, const std::string censor_time, const std::string pd, const std::string pd_time, const std::string swtrt, const std::string swtrt_time, const std::string swtrt_time_upper, const StringVector& base_cov, const StringVector& conf_cov, const double low_psi, const double hi_psi, const bool strata_main_effect_only, const bool firth, const bool flic, const bool recensor, const bool admin_recensor_only, const bool swtrt_control_only, const double alpha, const std::string ties, const double tol, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_tsegestcpp(SEXP dataSEXP, SEXP idSEXP, SEXP stratumSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP censor_timeSEXP, SEXP pdSEXP, SEXP pd_timeSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP swtrt_time_upperSEXP, SEXP base_covSEXP, SEXP conf_covSEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP strata_main_effect_onlySEXP, SEXP firthSEXP, SEXP flicSEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP tolSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd(pdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd_time(pd_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time_upper(swtrt_time_upperSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type conf_cov(conf_covSEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< const bool >::type flic(flicSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsegestcpp(data, id, stratum, tstart, tstop, event, treat, censor_time, pd, pd_time, swtrt, swtrt_time, swtrt_time_upper, base_cov, conf_cov, low_psi, hi_psi, strata_main_effect_only, firth, flic, recensor, admin_recensor_only, swtrt_control_only, alpha, ties, tol, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// tsegestsim
List tsegestsim(const int n, const int allocation1, const int allocation2, const double pbprog, const double trtlghr, const double bprogsl, const double shape1, const double scale1, const double shape2, const double scale2, const double pmix, const double admin, const double pcatnotrtbprog, const double pcattrtbprog, const double pcatnotrt, const double pcattrt, const double catmult, const double tdxo, const double ppoor, const double pgood, const double ppoormet, const double pgoodmet, const double xomult, const double milestone, const bool swtrt_control_only, const bool outputRawDataset, const int seed);
RcppExport SEXP _trtswitch_tsegestsim(SEXP nSEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP pbprogSEXP, SEXP trtlghrSEXP, SEXP bprogslSEXP, SEXP shape1SEXP, SEXP scale1SEXP, SEXP shape2SEXP, SEXP scale2SEXP, SEXP pmixSEXP, SEXP adminSEXP, SEXP pcatnotrtbprogSEXP, SEXP pcattrtbprogSEXP, SEXP pcatnotrtSEXP, SEXP pcattrtSEXP, SEXP catmultSEXP, SEXP tdxoSEXP, SEXP ppoorSEXP, SEXP pgoodSEXP, SEXP ppoormetSEXP, SEXP pgoodmetSEXP, SEXP xomultSEXP, SEXP milestoneSEXP, SEXP swtrt_control_onlySEXP, SEXP outputRawDatasetSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const double >::type pbprog(pbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type trtlghr(trtlghrSEXP);
    Rcpp::traits::input_parameter< const double >::type bprogsl(bprogslSEXP);
    Rcpp::traits::input_parameter< const double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< const double >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< const double >::type scale2(scale2SEXP);
    Rcpp::traits::input_parameter< const double >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const double >::type admin(adminSEXP);
    Rcpp::traits::input_parameter< const double >::type pcatnotrtbprog(pcatnotrtbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type pcattrtbprog(pcattrtbprogSEXP);
    Rcpp::traits::input_parameter< const double >::type pcatnotrt(pcatnotrtSEXP);
    Rcpp::traits::input_parameter< const double >::type pcattrt(pcattrtSEXP);
    Rcpp::traits::input_parameter< const double >::type catmult(catmultSEXP);
    Rcpp::traits::input_parameter< const double >::type tdxo(tdxoSEXP);
    Rcpp::traits::input_parameter< const double >::type ppoor(ppoorSEXP);
    Rcpp::traits::input_parameter< const double >::type pgood(pgoodSEXP);
    Rcpp::traits::input_parameter< const double >::type ppoormet(ppoormetSEXP);
    Rcpp::traits::input_parameter< const double >::type pgoodmet(pgoodmetSEXP);
    Rcpp::traits::input_parameter< const double >::type xomult(xomultSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type outputRawDataset(outputRawDatasetSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsegestsim(n, allocation1, allocation2, pbprog, trtlghr, bprogsl, shape1, scale1, shape2, scale2, pmix, admin, pcatnotrtbprog, pcattrtbprog, pcatnotrt, pcattrt, catmult, tdxo, ppoor, pgood, ppoormet, pgoodmet, xomult, milestone, swtrt_control_only, outputRawDataset, seed));
    return rcpp_result_gen;
END_RCPP
}
// tsesimpcpp
List tsesimpcpp(const DataFrame data, const StringVector& stratum, const std::string time, const std::string event, const std::string treat, const std::string censor_time, const std::string pd, const std::string pd_time, const std::string swtrt, const std::string swtrt_time, const StringVector& base_cov, const StringVector& base2_cov, const std::string aft_dist, const bool strata_main_effect_only, const bool recensor, const bool admin_recensor_only, const bool swtrt_control_only, const double alpha, const std::string ties, const double offset, const bool boot, const int n_boot, const int seed);
RcppExport SEXP _trtswitch_tsesimpcpp(SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP censor_timeSEXP, SEXP pdSEXP, SEXP pd_timeSEXP, SEXP swtrtSEXP, SEXP swtrt_timeSEXP, SEXP base_covSEXP, SEXP base2_covSEXP, SEXP aft_distSEXP, SEXP strata_main_effect_onlySEXP, SEXP recensorSEXP, SEXP admin_recensor_onlySEXP, SEXP swtrt_control_onlySEXP, SEXP alphaSEXP, SEXP tiesSEXP, SEXP offsetSEXP, SEXP bootSEXP, SEXP n_bootSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd(pdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type pd_time(pd_timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt(swtrtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type swtrt_time(swtrt_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base2_cov(base2_covSEXP);
    Rcpp::traits::input_parameter< const std::string >::type aft_dist(aft_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_main_effect_only(strata_main_effect_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type admin_recensor_only(admin_recensor_onlySEXP);
    Rcpp::traits::input_parameter< const bool >::type swtrt_control_only(swtrt_control_onlySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< const double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(tsesimpcpp(data, stratum, time, event, treat, censor_time, pd, pd_time, swtrt, swtrt_time, base_cov, base2_cov, aft_dist, strata_main_effect_only, recensor, admin_recensor_only, swtrt_control_only, alpha, ties, offset, boot, n_boot, seed));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(int seed);
RcppExport SEXP _trtswitch_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// findInterval3
IntegerVector findInterval3(NumericVector x, NumericVector v);
RcppExport SEXP _trtswitch_findInterval3(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval3(x, v));
    return rcpp_result_gen;
END_RCPP
}
// hasVariable
bool hasVariable(DataFrame df, std::string varName);
RcppExport SEXP _trtswitch_hasVariable(SEXP dfSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< std::string >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(hasVariable(df, varName));
    return rcpp_result_gen;
END_RCPP
}
// quantilecpp
double quantilecpp(const NumericVector& x, const double p);
RcppExport SEXP _trtswitch_quantilecpp(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(quantilecpp(x, p));
    return rcpp_result_gen;
END_RCPP
}
// c_vectors_i
IntegerVector c_vectors_i(IntegerVector vec1, IntegerVector vec2);
RcppExport SEXP _trtswitch_c_vectors_i(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_vectors_i(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// c_vectors
NumericVector c_vectors(NumericVector vec1, NumericVector vec2);
RcppExport SEXP _trtswitch_c_vectors(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_vectors(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix_by_row
NumericMatrix subset_matrix_by_row(NumericMatrix a, IntegerVector q);
RcppExport SEXP _trtswitch_subset_matrix_by_row(SEXP aSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix_by_row(a, q));
    return rcpp_result_gen;
END_RCPP
}
// c_matrices
NumericMatrix c_matrices(NumericMatrix a1, NumericMatrix a2);
RcppExport SEXP _trtswitch_c_matrices(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_matrices(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// bygroup
List bygroup(DataFrame data, const StringVector& variables);
RcppExport SEXP _trtswitch_bygroup(SEXP dataSEXP, SEXP variablesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type variables(variablesSEXP);
    rcpp_result_gen = Rcpp::wrap(bygroup(data, variables));
    return rcpp_result_gen;
END_RCPP
}
// cholesky2
int cholesky2(NumericMatrix matrix, int n, double toler);
RcppExport SEXP _trtswitch_cholesky2(SEXP matrixSEXP, SEXP nSEXP, SEXP tolerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky2(matrix, n, toler));
    return rcpp_result_gen;
END_RCPP
}
// chsolve2
void chsolve2(NumericMatrix matrix, int n, NumericVector y);
RcppExport SEXP _trtswitch_chsolve2(SEXP matrixSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    chsolve2(matrix, n, y);
    return R_NilValue;
END_RCPP
}
// chinv2
void chinv2(NumericMatrix matrix, int n);
RcppExport SEXP _trtswitch_chinv2(SEXP matrixSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    chinv2(matrix, n);
    return R_NilValue;
END_RCPP
}
// invsympd
NumericMatrix invsympd(NumericMatrix matrix, int n, double toler);
RcppExport SEXP _trtswitch_invsympd(SEXP matrixSEXP, SEXP nSEXP, SEXP tolerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    rcpp_result_gen = Rcpp::wrap(invsympd(matrix, n, toler));
    return rcpp_result_gen;
END_RCPP
}
// survsplit
DataFrame survsplit(NumericVector tstart, NumericVector tstop, NumericVector cut);
RcppExport SEXP _trtswitch_survsplit(SEXP tstartSEXP, SEXP tstopSEXP, SEXP cutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut(cutSEXP);
    rcpp_result_gen = Rcpp::wrap(survsplit(tstart, tstop, cut));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted
bool is_sorted(NumericVector x);
RcppExport SEXP _trtswitch_is_sorted(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted(x));
    return rcpp_result_gen;
END_RCPP
}
// house
NumericVector house(NumericVector x);
RcppExport SEXP _trtswitch_house(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(house(x));
    return rcpp_result_gen;
END_RCPP
}
// row_house
void row_house(NumericMatrix A, NumericVector v);
RcppExport SEXP _trtswitch_row_house(SEXP ASEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    row_house(A, v);
    return R_NilValue;
END_RCPP
}
// qrcpp
List qrcpp(NumericMatrix x, double tol);
RcppExport SEXP _trtswitch_qrcpp(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(qrcpp(x, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_trtswitch_ipcwcpp", (DL_FUNC) &_trtswitch_ipcwcpp, 28},
    {"_trtswitch_ipecpp", (DL_FUNC) &_trtswitch_ipecpp, 20},
    {"_trtswitch_logisregcpp", (DL_FUNC) &_trtswitch_logisregcpp, 13},
    {"_trtswitch_rpsftmcpp", (DL_FUNC) &_trtswitch_rpsftmcpp, 22},
    {"_trtswitch_splineDesigncpp", (DL_FUNC) &_trtswitch_splineDesigncpp, 4},
    {"_trtswitch_bscpp", (DL_FUNC) &_trtswitch_bscpp, 7},
    {"_trtswitch_nscpp", (DL_FUNC) &_trtswitch_nscpp, 5},
    {"_trtswitch_fsurvci", (DL_FUNC) &_trtswitch_fsurvci, 4},
    {"_trtswitch_kmest", (DL_FUNC) &_trtswitch_kmest, 7},
    {"_trtswitch_lrtest", (DL_FUNC) &_trtswitch_lrtest, 8},
    {"_trtswitch_rmest", (DL_FUNC) &_trtswitch_rmest, 8},
    {"_trtswitch_rmdiff", (DL_FUNC) &_trtswitch_rmdiff, 10},
    {"_trtswitch_liferegcpp", (DL_FUNC) &_trtswitch_liferegcpp, 14},
    {"_trtswitch_phregcpp", (DL_FUNC) &_trtswitch_phregcpp, 17},
    {"_trtswitch_survfit_phregcpp", (DL_FUNC) &_trtswitch_survfit_phregcpp, 14},
    {"_trtswitch_residuals_phregcpp", (DL_FUNC) &_trtswitch_residuals_phregcpp, 13},
    {"_trtswitch_tsegestcpp", (DL_FUNC) &_trtswitch_tsegestcpp, 29},
    {"_trtswitch_tsegestsim", (DL_FUNC) &_trtswitch_tsegestsim, 27},
    {"_trtswitch_tsesimpcpp", (DL_FUNC) &_trtswitch_tsesimpcpp, 23},
    {"_trtswitch_set_seed", (DL_FUNC) &_trtswitch_set_seed, 1},
    {"_trtswitch_findInterval3", (DL_FUNC) &_trtswitch_findInterval3, 2},
    {"_trtswitch_hasVariable", (DL_FUNC) &_trtswitch_hasVariable, 2},
    {"_trtswitch_quantilecpp", (DL_FUNC) &_trtswitch_quantilecpp, 2},
    {"_trtswitch_c_vectors_i", (DL_FUNC) &_trtswitch_c_vectors_i, 2},
    {"_trtswitch_c_vectors", (DL_FUNC) &_trtswitch_c_vectors, 2},
    {"_trtswitch_subset_matrix_by_row", (DL_FUNC) &_trtswitch_subset_matrix_by_row, 2},
    {"_trtswitch_c_matrices", (DL_FUNC) &_trtswitch_c_matrices, 2},
    {"_trtswitch_bygroup", (DL_FUNC) &_trtswitch_bygroup, 2},
    {"_trtswitch_cholesky2", (DL_FUNC) &_trtswitch_cholesky2, 3},
    {"_trtswitch_chsolve2", (DL_FUNC) &_trtswitch_chsolve2, 3},
    {"_trtswitch_chinv2", (DL_FUNC) &_trtswitch_chinv2, 2},
    {"_trtswitch_invsympd", (DL_FUNC) &_trtswitch_invsympd, 3},
    {"_trtswitch_survsplit", (DL_FUNC) &_trtswitch_survsplit, 3},
    {"_trtswitch_is_sorted", (DL_FUNC) &_trtswitch_is_sorted, 1},
    {"_trtswitch_house", (DL_FUNC) &_trtswitch_house, 1},
    {"_trtswitch_row_house", (DL_FUNC) &_trtswitch_row_house, 2},
    {"_trtswitch_qrcpp", (DL_FUNC) &_trtswitch_qrcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_trtswitch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
